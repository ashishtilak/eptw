// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ePTW.Models;

namespace ePTW.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220607100054_Observations")]
    partial class Observations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ePTW.Models.Category", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CatCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CatName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CompCode", "WrkGrp", "CatCode");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ePTW.Models.Company", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("CompName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CompCode");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("ePTW.Models.Department", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DeptName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CompCode", "WrkGrp", "UnitCode", "DeptCode");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ePTW.Models.Designation", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DesgCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DesgName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CompCode", "WrkGrp", "DesgCode");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("ePTW.Models.ElecReleasers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("GradeCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Releaser")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("StatCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CompCode", "WrkGrp", "CatCode");

                    b.HasIndex("CompCode", "WrkGrp", "GradeCode");

                    b.HasIndex("CompCode", "WrkGrp", "UnitCode", "DeptCode", "StatCode");

                    b.ToTable("ElecReleasers");
                });

            modelBuilder.Entity("ePTW.Models.EmpType", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EmpTypeCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("EmpTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CompCode", "WrkGrp", "EmpTypeCode");

                    b.ToTable("EmpType");
                });

            modelBuilder.Entity("ePTW.Models.Employee", b =>
                {
                    b.Property<string>("EmpUnqId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CatCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("CompanyAcc")
                        .HasColumnType("bit");

                    b.Property<string>("ContCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DesgCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmpTypeCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GradeCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Pan")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Pass")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SapId")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("StatCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("EmpUnqId");

                    b.HasIndex("CompCode", "WrkGrp", "CatCode");

                    b.HasIndex("CompCode", "WrkGrp", "DesgCode");

                    b.HasIndex("CompCode", "WrkGrp", "EmpTypeCode");

                    b.HasIndex("CompCode", "WrkGrp", "GradeCode");

                    b.HasIndex("CompCode", "WrkGrp", "UnitCode", "DeptCode", "StatCode");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("ePTW.Models.Grade", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("GradeCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("GradeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CompCode", "WrkGrp", "GradeCode");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("ePTW.Models.Locations", b =>
                {
                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("AttendanceServerApi")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PortalAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RemoteConnection")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RemoteEssConnection")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SmtpClient")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Location");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ePTW.Models.ObsPhotos", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ObsStatus")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PermitImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id", "ObsStatus");

                    b.ToTable("ObsPhotos");
                });

            modelBuilder.Entity("ePTW.Models.Observation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("ComplianceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CorrectiveAction")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ObsCatg")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("ObsDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ObsDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ObsStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ObservedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PersonResponsible")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ReleaseBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReleaseRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReleaseStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("StatusUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusUpdateReleaseBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("StatusUpdateReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusUpdateReleaseRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusUpdateReleaseStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CompCode", "WrkGrp", "UnitCode", "DeptCode", "StatCode");

                    b.ToTable("Observation");
                });

            modelBuilder.Entity("ePTW.Models.Permit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<bool>("AllowClose")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowFinalRelease")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSafetyEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserEdit")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AreaInchCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AreaInchCloseRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("AreaInchCloseRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("AreaInchRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AreaInchRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("AreaInchRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("AreaInchargeCloseReq")
                        .HasColumnType("bit");

                    b.Property<string>("AreaInchargeEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("AreaInchargeRelReq")
                        .HasColumnType("bit");

                    b.Property<string>("ChangedByEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CloseAreaInchEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CloseDeptInchEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CloseElecInchEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CloseElecTechEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CloseSafetyInchEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("CreatedByEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("DeptInchCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeptInchCloseRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("DeptInchCloseRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeptInchEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DeptInchRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeptInchRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("DeptInchargeCloseReq")
                        .HasColumnType("bit");

                    b.Property<bool>("DeptInchargeRelReq")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ElecInchCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ElecInchCloseRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ElecInchCloseRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ElecInchRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ElecInchRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ElecInchRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ElecInchargeCloseReq")
                        .HasColumnType("bit");

                    b.Property<string>("ElecInchargeEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("ElecInchargeRelReq")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ElecTechCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ElecTechCloseRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ElecTechCloseRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ElecTechCloseReq")
                        .HasColumnType("bit");

                    b.Property<string>("ElecTechEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ElecTechRelDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ElecTechRelReq")
                        .HasColumnType("bit");

                    b.Property<string>("ElecTechRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ElecTechRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ExtendFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FromDt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FullyReleasedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("HodRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastChangeOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OriginalToDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermitNo")
                        .HasColumnType("int");

                    b.Property<int>("PermitTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ResponsiblePerson")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("SafetyInchCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SafetyInchCloseRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("SafetyInchCloseRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SafetyInchRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SafetyInchargeEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SafetyInchargeRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("SafetyRejectionRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SafetyRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SelfCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SelfCloseEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SelfCloseRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("SelfCloseRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SelfRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SelfRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("StatCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("ToDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("VpEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("VpRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VpRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("VpRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentState");

                    b.HasIndex("PermitTypeId");

                    b.HasIndex("CompCode", "WrkGrp", "UnitCode", "DeptCode", "StatCode");

                    b.ToTable("Permit");
                });

            modelBuilder.Entity("ePTW.Models.PermitColdWork", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("AreaBarricated")
                        .HasColumnType("int");

                    b.Property<int>("Belt")
                        .HasColumnType("int");

                    b.Property<string>("Contractor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EarPlug")
                        .HasColumnType("int");

                    b.Property<int>("ElectricalIsolationDone")
                        .HasColumnType("int");

                    b.Property<int>("Goggles")
                        .HasColumnType("int");

                    b.Property<int>("HandGloves")
                        .HasColumnType("int");

                    b.Property<int>("Helmet")
                        .HasColumnType("int");

                    b.Property<int>("Isolationdone")
                        .HasColumnType("int");

                    b.Property<int>("NoseMask")
                        .HasColumnType("int");

                    b.Property<string>("OtherCheck")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PermitNo")
                        .HasColumnType("int");

                    b.Property<int>("PermitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PipeConnectionBlanked")
                        .HasColumnType("int");

                    b.Property<string>("PipeConnectionDetail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PossibilityOfFlammable")
                        .HasColumnType("int");

                    b.Property<int>("PossibilityOfGasPressure")
                        .HasColumnType("int");

                    b.Property<int>("SafetyTags")
                        .HasColumnType("int");

                    b.Property<int>("Shoes")
                        .HasColumnType("int");

                    b.Property<int>("WorkAreaCleaned")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermitTypeId");

                    b.ToTable("PermitColdWork");
                });

            modelBuilder.Entity("ePTW.Models.PermitCrossRef", b =>
                {
                    b.Property<long>("PermitId")
                        .HasColumnType("bigint");

                    b.Property<long>("CrossRefPermitId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrossRefPermitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PermitTypeId")
                        .HasColumnType("int");

                    b.HasKey("PermitId", "CrossRefPermitId");

                    b.HasIndex("CrossRefPermitTypeId");

                    b.HasIndex("PermitTypeId");

                    b.ToTable("PermitCrossRef");
                });

            modelBuilder.Entity("ePTW.Models.PermitElecIsolation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Belt")
                        .HasColumnType("int");

                    b.Property<int>("EarPlug")
                        .HasColumnType("int");

                    b.Property<int>("Goggles")
                        .HasColumnType("int");

                    b.Property<int>("HandGloves")
                        .HasColumnType("int");

                    b.Property<int>("Helmet")
                        .HasColumnType("int");

                    b.Property<string>("LottoKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NoseMask")
                        .HasColumnType("int");

                    b.Property<string>("PanelFeederNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PanelNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PermitNo")
                        .HasColumnType("int");

                    b.Property<int>("PermitTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReqIsolationEquipment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReqPanel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReqWork")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Shoes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermitTypeId");

                    b.ToTable("PermitElecIsolation");
                });

            modelBuilder.Entity("ePTW.Models.PermitHeight", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ApproxHeight")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("AreaBarricated")
                        .HasColumnType("int");

                    b.Property<int>("Belt")
                        .HasColumnType("int");

                    b.Property<string>("Contractor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EarPlug")
                        .HasColumnType("int");

                    b.Property<int>("FallArrestor")
                        .HasColumnType("int");

                    b.Property<int>("Goggles")
                        .HasColumnType("int");

                    b.Property<int>("HandGloves")
                        .HasColumnType("int");

                    b.Property<int>("Helmet")
                        .HasColumnType("int");

                    b.Property<int>("InstructionsGiven")
                        .HasColumnType("int");

                    b.Property<int>("LifeLine")
                        .HasColumnType("int");

                    b.Property<int>("LiftingTools")
                        .HasColumnType("int");

                    b.Property<int>("NoseMask")
                        .HasColumnType("int");

                    b.Property<int>("PermitNo")
                        .HasColumnType("int");

                    b.Property<int>("PermitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SafetyBelt")
                        .HasColumnType("int");

                    b.Property<int>("SafetyLadder")
                        .HasColumnType("int");

                    b.Property<int>("SafetyNet")
                        .HasColumnType("int");

                    b.Property<int>("Scaffolding")
                        .HasColumnType("int");

                    b.Property<int>("Shoes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermitTypeId");

                    b.ToTable("PermitHeight");
                });

            modelBuilder.Entity("ePTW.Models.PermitHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AreaInchRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AreaInchRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("AreaInchRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AreaInchargeEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ChangedByEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedByEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeptInchEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DeptInchRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeptInchRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime?>("ElecInchRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ElecInchRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ElecInchRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ElecInchargeEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ElecTechEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ElecTechRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ElecTechRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ElecTechRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExtendDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FromDt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FullyReleasedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("HodRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastChangeOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("PermitId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResponsiblePerson")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("SafetyInchRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SafetyInchargeEmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SafetyInchargeRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("SafetyRejectionRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SafetyRemarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SelfRelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SelfRelStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime?>("ToDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PermitId");

                    b.ToTable("PermitHistory");
                });

            modelBuilder.Entity("ePTW.Models.PermitHotWork", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Belt")
                        .HasColumnType("int");

                    b.Property<double?>("CoLevel")
                        .HasColumnType("float");

                    b.Property<int>("CoLevelChecked")
                        .HasColumnType("int");

                    b.Property<int>("ContinuousSupervision")
                        .HasColumnType("int");

                    b.Property<string>("Contractor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EarPlug")
                        .HasColumnType("int");

                    b.Property<int>("ElectricalIsolationReq")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentEarthen")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentInGoodCondition")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentIsolated")
                        .HasColumnType("int");

                    b.Property<int>("ExtinguisherAvailable")
                        .HasColumnType("int");

                    b.Property<int>("FlushCleanContainer")
                        .HasColumnType("int");

                    b.Property<int>("FreeFromOrgVapour")
                        .HasColumnType("int");

                    b.Property<int>("Goggles")
                        .HasColumnType("int");

                    b.Property<int>("HandGloves")
                        .HasColumnType("int");

                    b.Property<int>("Helmet")
                        .HasColumnType("int");

                    b.Property<int>("IsolationDone")
                        .HasColumnType("int");

                    b.Property<double?>("LelLevel")
                        .HasColumnType("float");

                    b.Property<int>("LelLevelChecked")
                        .HasColumnType("int");

                    b.Property<int>("LineBlinded")
                        .HasColumnType("int");

                    b.Property<int>("ManHolesOpen")
                        .HasColumnType("int");

                    b.Property<int>("NearEquipmentCovered")
                        .HasColumnType("int");

                    b.Property<int>("NoseMask")
                        .HasColumnType("int");

                    b.Property<int>("PermitNo")
                        .HasColumnType("int");

                    b.Property<int>("PermitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonTrained")
                        .HasColumnType("int");

                    b.Property<int>("PpeProvided")
                        .HasColumnType("int");

                    b.Property<int>("SewersCovered")
                        .HasColumnType("int");

                    b.Property<int>("Shoes")
                        .HasColumnType("int");

                    b.Property<int>("SparkArrangement")
                        .HasColumnType("int");

                    b.Property<int>("SurroundingAreaCleaned")
                        .HasColumnType("int");

                    b.Property<int>("ToolsProvided")
                        .HasColumnType("int");

                    b.Property<int>("ToolsTackles")
                        .HasColumnType("int");

                    b.Property<int>("UseOfDrum")
                        .HasColumnType("int");

                    b.Property<int>("VesselFlushed")
                        .HasColumnType("int");

                    b.Property<int>("VesselPurged")
                        .HasColumnType("int");

                    b.Property<string>("WatcherName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("WeldMachineConnection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermitTypeId");

                    b.ToTable("PermitHotWork");
                });

            modelBuilder.Entity("ePTW.Models.PermitPerson", b =>
                {
                    b.Property<long>("PermitId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmpUnqId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermitId", "EmpUnqId");

                    b.ToTable("PermitPerson");
                });

            modelBuilder.Entity("ePTW.Models.PermitPhotos", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Sr")
                        .HasColumnType("int");

                    b.Property<byte[]>("PermitImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id", "Sr");

                    b.ToTable("PermitPhotos");
                });

            modelBuilder.Entity("ePTW.Models.PermitReleaseConf", b =>
                {
                    b.Property<int>("PermitTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("AreaInchargeCloseReq")
                        .HasColumnType("bit");

                    b.Property<bool>("AreaInchargeRelReq")
                        .HasColumnType("bit");

                    b.Property<bool>("DeptInchargeCloseReq")
                        .HasColumnType("bit");

                    b.Property<bool>("DeptInchargeRelReq")
                        .HasColumnType("bit");

                    b.Property<bool>("ElecInchargeCloseReq")
                        .HasColumnType("bit");

                    b.Property<bool>("ElecInchargeRelReq")
                        .HasColumnType("bit");

                    b.Property<bool>("ElecTechCloseReq")
                        .HasColumnType("bit");

                    b.Property<bool>("ElecTechRelReq")
                        .HasColumnType("bit");

                    b.HasKey("PermitTypeId");

                    b.ToTable("PermitReleaseConf");
                });

            modelBuilder.Entity("ePTW.Models.PermitState", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("StateDesc")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PermitState");

                    b.HasData(
                        new
                        {
                            Id = "N",
                            StateDesc = "Created"
                        },
                        new
                        {
                            Id = "P",
                            StateDesc = "Partial Released"
                        },
                        new
                        {
                            Id = "F",
                            StateDesc = "Fully Released"
                        },
                        new
                        {
                            Id = "S",
                            StateDesc = "Closure Started"
                        },
                        new
                        {
                            Id = "R",
                            StateDesc = "Partially Closed"
                        },
                        new
                        {
                            Id = "C",
                            StateDesc = "Closed"
                        },
                        new
                        {
                            Id = "D",
                            StateDesc = "Deleted"
                        },
                        new
                        {
                            Id = "X",
                            StateDesc = "Force Closed"
                        });
                });

            modelBuilder.Entity("ePTW.Models.PermitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DocNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermitTypeDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PersonEntryRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PermitType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            DocNo = "JSL/IPU/HSE/FR-06",
                            EffectiveDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermitTypeDesc = "Height Permit",
                            PersonEntryRequired = false,
                            Version = "3.0"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            DocNo = "JSL/IPU/HSE/FR-05",
                            EffectiveDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermitTypeDesc = "Hot Work Permit",
                            PersonEntryRequired = false,
                            Version = "3.0"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            DocNo = "JSL/IPU/HSE/FR-07",
                            EffectiveDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermitTypeDesc = "Electrical Isolation Permit",
                            PersonEntryRequired = false,
                            Version = "2.0"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            DocNo = "JSL/IPU/HSE/FR-04",
                            EffectiveDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermitTypeDesc = "Cold Work Permit",
                            PersonEntryRequired = false,
                            Version = "1.2"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            DocNo = "JSL/IPU/HSE/FR-08",
                            EffectiveDate = new DateTime(2016, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermitTypeDesc = "Vessel Entry Work Permit",
                            PersonEntryRequired = false,
                            Version = "1.1"
                        });
                });

            modelBuilder.Entity("ePTW.Models.PermitVesselEntry", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Belt")
                        .HasColumnType("int");

                    b.Property<string>("Contractor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EarPlug")
                        .HasColumnType("int");

                    b.Property<int>("ElectricalIsolationReq")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentEarthen")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentIsolated")
                        .HasColumnType("int");

                    b.Property<double?>("ExplosiveLevel")
                        .HasColumnType("float");

                    b.Property<int>("ExplosiveLevelTestReq")
                        .HasColumnType("int");

                    b.Property<int>("Goggles")
                        .HasColumnType("int");

                    b.Property<int>("HandGloves")
                        .HasColumnType("int");

                    b.Property<int>("HandLampExtension")
                        .HasColumnType("int");

                    b.Property<int>("HandLampProvided")
                        .HasColumnType("int");

                    b.Property<int>("Helmet")
                        .HasColumnType("int");

                    b.Property<int>("Ladder")
                        .HasColumnType("int");

                    b.Property<int>("LinesBlinded")
                        .HasColumnType("int");

                    b.Property<int>("LockOutArrangement")
                        .HasColumnType("int");

                    b.Property<int>("NoseMask")
                        .HasColumnType("int");

                    b.Property<double?>("OxygenLevel")
                        .HasColumnType("float");

                    b.Property<int>("OxygenLevelCheck")
                        .HasColumnType("int");

                    b.Property<int>("PermitNo")
                        .HasColumnType("int");

                    b.Property<int>("PermitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonTrained")
                        .HasColumnType("int");

                    b.Property<int>("PpeProvided")
                        .HasColumnType("int");

                    b.Property<int>("RespiratoryProtectionReq")
                        .HasColumnType("int");

                    b.Property<int>("Shoes")
                        .HasColumnType("int");

                    b.Property<int>("ToolsProvided")
                        .HasColumnType("int");

                    b.Property<int>("VesselFreeFromToxicMaterial")
                        .HasColumnType("int");

                    b.Property<string>("WatcherName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("WorkAreaSafe")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermitTypeId");

                    b.ToTable("PermitVesselEntry");
                });

            modelBuilder.Entity("ePTW.Models.ReleaseAuth", b =>
                {
                    b.Property<string>("ReleaseCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmpUnqId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("ReleaseCode", "EmpUnqId");

                    b.HasIndex("EmpUnqId");

                    b.ToTable("ReleaseAuth");
                });

            modelBuilder.Entity("ePTW.Models.ReleaseStatus", b =>
                {
                    b.Property<string>("ReleaseStatusCode")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ReleaseStatusDesc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ReleaseStatusCode");

                    b.ToTable("ReleaseStatus");

                    b.HasData(
                        new
                        {
                            ReleaseStatusCode = "N",
                            ReleaseStatusDesc = "Not released"
                        },
                        new
                        {
                            ReleaseStatusCode = "I",
                            ReleaseStatusDesc = "In release"
                        },
                        new
                        {
                            ReleaseStatusCode = "R",
                            ReleaseStatusDesc = "Release rejected"
                        },
                        new
                        {
                            ReleaseStatusCode = "F",
                            ReleaseStatusDesc = "Fully released"
                        });
                });

            modelBuilder.Entity("ePTW.Models.ReleaseStrategyLevels", b =>
                {
                    b.Property<string>("ReleaseStrategy")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ReleaseCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ReleaseStrategy");

                    b.ToTable("ReleaseStrategyLevels");
                });

            modelBuilder.Entity("ePTW.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ePTW.Models.RoleAuth", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("MenuId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MenuName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId", "MenuId");

                    b.ToTable("RoleAuth");
                });

            modelBuilder.Entity("ePTW.Models.RoleUser", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("EmpUnqId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUserId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("RoleId", "EmpUnqId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("ePTW.Models.SafetyDeptStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("StatCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("SafetyDeptStat");
                });

            modelBuilder.Entity("ePTW.Models.Station", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("StatCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("StatName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompCode", "WrkGrp", "UnitCode", "DeptCode", "StatCode");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("ePTW.Models.Unit", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UnitName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompCode", "WrkGrp", "UnitCode");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("ePTW.Models.VpReleasers", b =>
                {
                    b.Property<string>("EmpUnqId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("EmpUnqId");

                    b.ToTable("VpReleasers");
                });

            modelBuilder.Entity("ePTW.Models.Workgroup", b =>
                {
                    b.Property<string>("CompCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WrkGrp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("AddDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddUser")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Location")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("WrkGrpDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompCode", "WrkGrp");

                    b.ToTable("Workgroup");
                });

            modelBuilder.Entity("ePTW.Models.Category", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.Department", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.Designation", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.ElecReleasers", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "CatCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Grade", "Grades")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "GradeCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Unit", "Units")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Department", "Departments")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode", "DeptCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Station", "Stations")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode", "DeptCode", "StatCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Categories");

                    b.Navigation("Company");

                    b.Navigation("Departments");

                    b.Navigation("Grades");

                    b.Navigation("Stations");

                    b.Navigation("Units");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.EmpType", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.Employee", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "CatCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Designation", "Designations")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "DesgCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.EmpType", "EmpTypes")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "EmpTypeCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Grade", "Grades")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "GradeCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Unit", "Units")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Department", "Departments")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode", "DeptCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Station", "Stations")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode", "DeptCode", "StatCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Categories");

                    b.Navigation("Company");

                    b.Navigation("Departments");

                    b.Navigation("Designations");

                    b.Navigation("EmpTypes");

                    b.Navigation("Grades");

                    b.Navigation("Stations");

                    b.Navigation("Units");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.Grade", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.ObsPhotos", b =>
                {
                    b.HasOne("ePTW.Models.Observation", "Observation")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Observation");
                });

            modelBuilder.Entity("ePTW.Models.Observation", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Unit", "Units")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Department", "Departments")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode", "DeptCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Station", "Stations")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode", "DeptCode", "StatCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Departments");

                    b.Navigation("Stations");

                    b.Navigation("Units");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.Permit", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.PermitState", "PermitState")
                        .WithMany()
                        .HasForeignKey("CurrentState")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.PermitType", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Unit", "Units")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Department", "Departments")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode", "DeptCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ePTW.Models.Station", "Stations")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode", "DeptCode", "StatCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Departments");

                    b.Navigation("PermitState");

                    b.Navigation("PermitType");

                    b.Navigation("Stations");

                    b.Navigation("Units");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.PermitColdWork", b =>
                {
                    b.HasOne("ePTW.Models.Permit", "Permit")
                        .WithOne("ColdWorkPermit")
                        .HasForeignKey("ePTW.Models.PermitColdWork", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.PermitType", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permit");

                    b.Navigation("PermitType");
                });

            modelBuilder.Entity("ePTW.Models.PermitCrossRef", b =>
                {
                    b.HasOne("ePTW.Models.PermitType", "CrossRefPermitType")
                        .WithMany()
                        .HasForeignKey("CrossRefPermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Permit", "Permit")
                        .WithMany("CrossRefs")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.PermitType", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CrossRefPermitType");

                    b.Navigation("Permit");

                    b.Navigation("PermitType");
                });

            modelBuilder.Entity("ePTW.Models.PermitElecIsolation", b =>
                {
                    b.HasOne("ePTW.Models.Permit", "Permit")
                        .WithOne("ElecIsolationPermit")
                        .HasForeignKey("ePTW.Models.PermitElecIsolation", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.PermitType", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permit");

                    b.Navigation("PermitType");
                });

            modelBuilder.Entity("ePTW.Models.PermitHeight", b =>
                {
                    b.HasOne("ePTW.Models.Permit", "Permit")
                        .WithOne("HeightPermit")
                        .HasForeignKey("ePTW.Models.PermitHeight", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.PermitType", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permit");

                    b.Navigation("PermitType");
                });

            modelBuilder.Entity("ePTW.Models.PermitHistory", b =>
                {
                    b.HasOne("ePTW.Models.Permit", "Permit")
                        .WithMany()
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("ePTW.Models.PermitHotWork", b =>
                {
                    b.HasOne("ePTW.Models.Permit", "Permit")
                        .WithOne("HotWorkPermit")
                        .HasForeignKey("ePTW.Models.PermitHotWork", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.PermitType", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permit");

                    b.Navigation("PermitType");
                });

            modelBuilder.Entity("ePTW.Models.PermitPerson", b =>
                {
                    b.HasOne("ePTW.Models.Permit", "Permit")
                        .WithMany("PermitPersons")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("ePTW.Models.PermitPhotos", b =>
                {
                    b.HasOne("ePTW.Models.Permit", "Permit")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("ePTW.Models.PermitReleaseConf", b =>
                {
                    b.HasOne("ePTW.Models.PermitType", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermitType");
                });

            modelBuilder.Entity("ePTW.Models.PermitVesselEntry", b =>
                {
                    b.HasOne("ePTW.Models.Permit", "Permit")
                        .WithOne("VesselEntryPermit")
                        .HasForeignKey("ePTW.Models.PermitVesselEntry", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.PermitType", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permit");

                    b.Navigation("PermitType");
                });

            modelBuilder.Entity("ePTW.Models.ReleaseAuth", b =>
                {
                    b.HasOne("ePTW.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpUnqId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ePTW.Models.Station", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp", "UnitCode", "DeptCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Unit");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.Unit", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ePTW.Models.Workgroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("CompCode", "WrkGrp")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("ePTW.Models.VpReleasers", b =>
                {
                    b.HasOne("ePTW.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpUnqId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ePTW.Models.Workgroup", b =>
                {
                    b.HasOne("ePTW.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ePTW.Models.Permit", b =>
                {
                    b.Navigation("ColdWorkPermit");

                    b.Navigation("CrossRefs");

                    b.Navigation("ElecIsolationPermit");

                    b.Navigation("HeightPermit");

                    b.Navigation("HotWorkPermit");

                    b.Navigation("PermitPersons");

                    b.Navigation("VesselEntryPermit");
                });
#pragma warning restore 612, 618
        }
    }
}
